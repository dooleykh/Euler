#!/usr/bin/env lein-exec

(defn sum-proper-divisors [n]
  (let [ceiling (inc (int (Math/sqrt n)))]
    (loop [current 2 factors '(1)]
      (let [q (quot n current) r (rem n current)]
        (cond
          (= current ceiling) (if (zero? r)
                                  (apply +' (cons current factors))
                                  (apply +' factors))
          (zero? r)           (recur (inc current)
                                     (concat (list current q) factors))
          :else               (recur (inc current)
                                     factors))))))

(def divisor-sums (zipmap (range 2 10000)
                          (map sum-proper-divisors
                               (range 2 10000))))

(defn amicable? [[a b]]
  (and (= (divisor-sums a) b)
       (= (divisor-sums b) a)))

(->> (for [x (range 2 10000)
           y (range 2 10000)
           :when (and (not= x y)
                      (< x y))]
          [x y])
     (filter amicable?)
     (flatten)
     (apply +')
     (println))
